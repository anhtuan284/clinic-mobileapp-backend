# Generated by Django 5.0 on 2024-02-20 10:48

import cloudinary.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("birth_date", models.DateField(null=True)),
                (
                    "sex",
                    models.CharField(
                        choices=[("Male", "Male"), ("Female", "Female")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("phone_nb", models.CharField(max_length=30, null=True)),
                (
                    "avatar",
                    cloudinary.models.CloudinaryField(
                        max_length=255, null=True, verbose_name="avatar"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("PATIENT", "Patient"),
                            ("ADMIN", "Admin"),
                            ("DOCTOR", "Doctor"),
                            ("NURSE", "Nurse"),
                        ],
                        default="PATIENT",
                        max_length=50,
                    ),
                ),
                ("created", models.DateField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=50)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Medicine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("TABLET", "Tablet"),
                            ("CAPSULE", "Capsule"),
                            ("LIQUID", "Liquid"),
                            ("INJECTION", "Injection"),
                            ("CREAM", "Cream"),
                            ("OINTMENT", "Ointment"),
                            ("DROPS", "Drops"),
                            ("POWDER", "Powder"),
                            ("OTHER", "Other"),
                        ],
                        default="TABLET",
                        max_length=50,
                    ),
                ),
                ("price", models.IntegerField()),
                ("manufacturer", models.CharField(max_length=100, null=True)),
                ("weight", models.FloatField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Prescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("symptoms", models.TextField(max_length=500)),
                ("diagnosis", models.TextField(max_length=500)),
                ("pay_status", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=25)),
                ("price", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Doctor",
            fields=[
                (
                    "user_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="doctor",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("salary", models.FloatField()),
                (
                    "specialty",
                    models.CharField(
                        choices=[
                            ("G", "General practice"),
                            ("C", "Clinical radiology"),
                            ("A", "Anaesthesia"),
                            ("O", "Ophthalmology"),
                        ],
                        default="G",
                        max_length=200,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Nurse",
            fields=[
                (
                    "user_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="nurse",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("salary", models.FloatField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "user_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="patient",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("weight", models.IntegerField(null=True)),
                ("allergies", models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="Notification 1}", max_length=50)),
                ("notice", models.TextField(max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_read", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PrescriptionMedicine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("dosage", models.CharField(max_length=50)),
                (
                    "medicine",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="clinic.medicine",
                    ),
                ),
                (
                    "prescription",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="clinic.prescription",
                    ),
                ),
            ],
            options={
                "unique_together": {("prescription", "medicine")},
            },
        ),
        migrations.AddField(
            model_name="prescription",
            name="medicines",
            field=models.ManyToManyField(
                through="clinic.PrescriptionMedicine", to="clinic.medicine"
            ),
        ),
        migrations.AddField(
            model_name="prescription",
            name="services",
            field=models.ManyToManyField(to="clinic.service"),
        ),
        migrations.AddField(
            model_name="prescription",
            name="doctor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="health_records",
                to="clinic.doctor",
            ),
        ),
        migrations.AddField(
            model_name="prescription",
            name="patient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="health_records",
                to="clinic.patient",
            ),
        ),
        migrations.CreateModel(
            name="Appointment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "scheduled_date",
                    models.DateField(default=datetime.date(2024, 2, 20)),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("order_number", models.PositiveIntegerField(default=None)),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="appointments",
                        to="clinic.patient",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Receipt",
            fields=[
                (
                    "prescription",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="receipt",
                        serialize=False,
                        to="clinic.prescription",
                    ),
                ),
                ("total", models.IntegerField()),
                ("created_date", models.DateField(default=datetime.date(2024, 2, 20))),
                ("paid", models.BooleanField(default=False)),
                (
                    "nurse",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="receipt_confirmed",
                        to="clinic.nurse",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DepartmentSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateField(auto_now_add=True, null=True)),
                ("updated_date", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("date", models.DateField()),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="clinic.department",
                    ),
                ),
                (
                    "doctor",
                    models.ManyToManyField(
                        related_name="schedules", to="clinic.doctor"
                    ),
                ),
                (
                    "nurse",
                    models.ManyToManyField(related_name="schedules", to="clinic.nurse"),
                ),
            ],
            options={
                "unique_together": {("date", "department")},
            },
        ),
    ]
